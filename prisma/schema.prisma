// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//NextAuth schema

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  expires_in         Int?
  ext_expires_in     Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Resource {
  id          String   @id @default(cuid())
  title       String
  name        String
  description String?
  url         String
  image       String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event       Event[]
  userId      String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  color       String?
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String?
  url         String?
  image       String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId  String
  tags        String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  start       DateTime
  end         DateTime
  allDay      Boolean @default(false)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String? @db.Text
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  resources     Resource[]
  events        Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}